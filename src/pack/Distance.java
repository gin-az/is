package pack;/*Пакет (package) — это некий контейнер, который используется для того, чтобы изолировать имена классов. 
pack - название пакета */

import javax.swing.*; // библиотека для графического интерфейса
import javax.swing.border.*;//библиотека необходимая для того, чтобы установить отступы 
import java.awt.event.*; 
/*Подключаем объект event, который содержит свойства, описывающие некое событие.
Каждый раз, когда происходит какое-либо событие, 
объект Event передается соответствующей программе обработки.
Используемым событием в нашей программе являются ACTION события.
*/
import java.awt.*; 
/*	java. - Все стандартные классы, поставляемые с системой Java, хранятся в пакете java.
java.awt  - подключение пакета awt, содержащего базовые графические функции:GridLayout, BorderLayout и т.д.
"*"-включение всех элементов библиотеки awt */	

public class Distance extends JPanel { /*Класс Distance, который доступен для любого файла из пакета pack наследует 
	функции элемента JPanel */

	private static final long serialVersionUID = 1L;
	
	private JPanel Panel_Text, Panel_Button;//панели на которых располагаются поля и кнопки. Панели доступны только для данного класса (private)
	private JButton Button_Calc;// кнопка Рассчитать которая доступна только для данного класса
	private JLabel Label_1,Label_2,Label_3,Label_4; // Панели на которых располагается текст, например "Расход топлива на 100 км (л): "
	public static JTextField TextField_100km,TextField_distance,TextField_price;/* текстовые поля в которые пользователь 
	вводит данные, доступны для любого файла из пакета pack */
	public static JCheckBox CheckBox_100km;// компонент флажок
	public static int  CB_100km;//переменная типа integer, доступная любому классу
		/*static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
	отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
	и переменным можно обращаться через имя класса.*/
	
	public Distance()  {  //метод, описывающий какие поля и кнопки располагаются на панели
		setLayout (new BorderLayout()); /*	Оператор new создает экземпляр указанного класса
	  	Метод setLayout - Вызов менеджера компоновки, который задает определенный порядок панелей в контейнере.
 		Менеджер размещения BorderLayout - тип разбивки контейнера, при котором всё пространство контейнера разбивается 
 		на пять частей. В каждой из этих частей располагается один компонент. 
 		При добавлении компонента на контейнер с BorderLayout разработчик обязательно указывает, 
 		куда именно он хочет поместить компонент.*/
		
		Panel_Text = new JPanel(); //Панель на которой располагаются текстовые поля и поля для ввода текста
		Panel_Button = new JPanel();//Панель на которой распол кнопка

		add(Panel_Text, BorderLayout.CENTER);//Добавление панели Panel_Text по центру
		add(Panel_Button, BorderLayout.SOUTH);//Добавление панели Panel_Button снизу
		
		Panel_Text.setLayout(new GridLayout(4,2,10,10));// на панеле будет 4 строки, 2 столбца, расстояние между столбцами 10, расстояние между строками 10
		Panel_Button.setLayout(new GridLayout(1,1));//на панели 1 строка,1столбец
		
		Panel_Text.setBorder(new EmptyBorder(74,7,123,7));//внутренние отступы панели (74сверху,7слева,123снизу,7справа)
		
		Label_1 = new JLabel("Расход топлива на 100 км (л): ", JLabel.RIGHT);
		Label_2 = new JLabel("Рассчитать автоматически", JLabel.RIGHT);
		Label_3 = new JLabel("Расстояние (км): ", JLabel.RIGHT);
		Label_4 = new JLabel("Цена топлива за 1 л. (руб.):", JLabel.RIGHT);
		/*Обозначаем что переменные Label_1,Label_2..являются объектом JLabel и указываем какой текст будет выводиться.
		JLabel.RIGHT - выравнивание по правому краю
		*/
		
		Button_Calc = new JButton("Рассчитать расход топлива"); //В скобках - надпись на кнопке
		
		CheckBox_100km = new JCheckBox();//компонент флажок 
		CheckBox_100km.setToolTipText("Рассчитать расход топлива на 100 км (после нажатия на кнопку 'Рассчитать' откроется вкладка 'На 100 км')");
		/* setToolTipText - подсказка, которая показывается при наведении на элемент CheckBox_100km(компонент флажок)*/
		
		TextField_100km = new JTextField();
		TextField_100km.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		TextField_100km.setToolTipText("Введите расход топлива на 100 км");//всплывающая подсказка при наведении на текстовое поле
    	
		TextField_distance = new JTextField();
		TextField_distance.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		TextField_distance.setToolTipText("Введите расстояние в км");//всплывающая подсказка при наведении на текстовое поле
    			
		TextField_price = new JTextField();
		TextField_price.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		TextField_price.setToolTipText("Введите цену топлива за 1 литр");//всплывающая подсказка при наведении на текстовое поле
		
		Panel_Button.add(Button_Calc);//Добавление кнопки на панель Panel_Button
		
		//Добавление компонентов JLabel и JTextField на панель Panel_Text
		Panel_Text.add(Label_1);
		Panel_Text.add(TextField_100km);
		Panel_Text.add(Label_2);
		Panel_Text.add(CheckBox_100km);
		Panel_Text.add(Label_3);
		Panel_Text.add(TextField_distance);
		Panel_Text.add(Label_4);
		Panel_Text.add(TextField_price);


		CheckBox_100km.addItemListener(new ItemListener(){  /*Для компонента флажок устанавливаем слушатель события  
			Если нажать на компонент - сработает проверка выбран флажок или снят */                                                     
			public void itemStateChanged(ItemEvent e)
			/*. В теле метода itemStateChanged располагается код, который выполняется при смене состояния флажка. */
			{
				if (e.getSource()==CheckBox_100km) //если событие произошло именно с флажком CheckBox_100km, то выполняется следующее
					if(e.getStateChange()==1){ //если флажок в состоянии '1'-значит он выбран, если 0 - снят
						TextField_100km.setEditable(false); //так как флажок включен, запрещаем изменение текстового поля TextField_100km
						CB_100km=1; //переменная отвечающая за состояние компонента флажок (1 - включен)
					}
					else {
						TextField_100km.setEditable(true); //флажок снят, значит разрешаем изменение текстового поля
						CB_100km=0; //переменная отвечающая за состояние компонента флажок (0 - снят)
					}
			}                                                       
    	   }); 		
		
		
		
		
		
		Button_Calc.addActionListener(new ActionListener(){    //добавляем слушателя события для кнопки 
			/*      "."  - указывает к какой переменной (кнопке) следует применить слушателя.
		 	addActionListener - добавление слушателя ActionListener к кнопке
		  	new - Оператор new создает экземпляр указанного класса 
		  	(Для того чтобы кнопки стали функциональными, каждой из них необходимо присвоить обработчик событий, 
		  	который будет отвечать за реагирование на события. 
		  	В нашем случае требуется идентифицировать событие нажатия кнопки – путем щелчка мышью. 
		  	Поэтому будет использоваться интерфейс "ActionListener", 
		  	предназначенный для обработки событий "ActionEvent".
		  	тело интерфейса указывается ниже после фигурной скобки "{"
    	    */
    	    public void actionPerformed(ActionEvent e) 
    	    /* 	ActionListener" имеет метод "actionPerformed" объекта "ActionEvent", 
	      	который реализуется путем простого вызова обработчика событий ActionPerformed.
	      	Ключевое слово public означает, что метод actionPerformed() доступен для любого другого класса Java
	      	Ключевое слово void означает, что метод main() не возвращает данных в программу, которая его вызвала. 
	      	*/             
    	    {   
    	    
    	    	if ((Index.isValidInput(TextField_distance, "расстояние"))&&
        	    		(Index.isValidInput(TextField_price, "цену топлива за 1 литр"))){
    	    		/*Проверка правильности введенных данных. Функция isValidInput расположена в файле Index */
    	    		
    	    		if (CB_100km==1){	//если флажок Рассчитать автоматически включен, то переходим на следующую вкладку
    	    			Index.JTP.setSelectedIndex(1); /*JTP - панель вкладок, расположенная в файле Index. 
    	    			setSelectedIndex - указываем какая вкладка должна показываться. 1 - вкладка На 100 км.
    	    			Вкладка На определенное расстояние - 0.
    	    			*/
    	    		} else { /* Если флажок выключен, проверяем правильно ли пользователь ввел данные в поле Расход 
    	    				топлива на 100 км.  Если правильно - выполняем функцию Dan_dist которая расположена в файле Calc.
    	    				Данная функция считывает введеные пользователем данные.*/
    	    			if (Index.isValidInput(TextField_100km, "расход топлива на 100 км")) {
    	    				Calc.Dan_dist();
    	    				Calc_distance.main(null);  //Открываем окно с расчетами
    	    				Index.Index.setVisible(false); //Окно Зарплатный калькулятор становится невидимым
    	    			}
    	    		}
		         }
    	    }    	    	                                                        
    	   });  	
    	
    	
		
	}
	

	
}
